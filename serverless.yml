service: aws-learning

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  profile: serverlessUser
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
        - sns:SetSMSAttributes
        - sns:Publish
        - ses:*
      Resource: "*"


package:
  individually: true
  exclude:
    - .git/**
    - node_modules/**
    - .venv/**

plugins:
  - serverless-s3-sync
  - serverless-webpack
  - serverless-offline

custom:
  tableName: player-points
  bucketName: myserverlessprojectuploadbucket-001001
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: UploadData

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - httpApi:
          path: /get-user/{ID}
          method: GET
          cors: true
  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - httpApi:
          path: /get-user-score/{ID}
          method: GET
          cors: true
  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - httpApi:
          path: /create-player-score/{ID}
          method: POST
          cors: true
  updatePlayerScore:
    handler: lambdas/endpoints/updatePlayerScore.handler
    events:
      - httpApi:
          path: /update-player-score/{ID}
          method: PUT
          cors: true
  getGameScores:
    handler: lambdas/endpoints/getGameScores.handler
    events:
      - httpApi:
          path: /get-game-scores/{game}
          method: GET
          cors: true
  createFile:
    handler: lambdas/endpoints/createFile.handler
    events:
      - httpApi:
          path: /create-file/{fileName}
          method: POST
          cors: true
  getFile:
    handler: lambdas/endpoints/getFile.handler
    events:
      - httpApi:
          path: /get-file/{fileName}
          method: GET
          cors: true
  sendSMS:
    handler: lambdas/endpoints/sendSMS.handler
    events:
      - httpApi:
          path: /send-sms
          method: POST
          cors: true
  sendReminder:
    handler: lambdas/scheduleTasks/reminderEmail.handler
    events:
      - schedule: cron(0 9 ? * 7 *)
  sendMorningNews:
    handler: lambdas/scheduleTasks/morningNews.handler
    events:
      - schedule: cron(15 7 ? * * *)
  proxy:
    handler: lambdas/endpoints/proxy.handler
    events:
      - httpApi:
          path: /chuck-norris/{proxy+}
          method: ANY
          integration: http-proxy
          request:
            uri: http://url/{proxy} # proxy path
            parameters:
              paths:
                proxy: true

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: game
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: game-index
            KeySchema:
              - AttributeName: game
                KeyType: HASH
            Projection:
                ProjectionType: ALL
    myAssumeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: myAssumeRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com
              Action:
                - 'sts:AssumeRole'
